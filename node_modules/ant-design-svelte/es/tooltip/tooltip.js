/* generated by Svelte v3.6.5 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_text,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "svelte/internal";
import classNames, { formatStyle } from "../_util/classes";

function create_fragment(ctx) {
	var div3, div2, div0, t0, div1, t1, div3_class_value, div3_style_value;

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = text(ctx.title);
			this.h()
		},

		l(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true, style: true }, false);
			var div3_nodes = children(div3);

			div2 = claim_element(div3_nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			div0 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			div0_nodes.forEach(detach);
			t0 = claim_text(div2_nodes, "\n    ");

			div1 = claim_element(div2_nodes, "DIV", { class: true, role: true }, false);
			var div1_nodes = children(div1);

			t1 = claim_text(div1_nodes, ctx.title);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(div0, "class", "ant-tooltip-arrow");
			attr(div1, "class", "ant-tooltip-inner");
			attr(div1, "role", "tooltip");
			attr(div2, "class", "ant-tooltip-content");
			attr(div3, "class", div3_class_value = classNames('ant-tooltip', `ant-tooltip-placement-${ctx.placement}`, {
    'ant-tooltip-hidden': !ctx.visible,
  }));
			attr(div3, "style", div3_style_value = formatStyle(ctx.style));
		},

		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, div0);
			append(div2, t0);
			append(div2, div1);
			append(div1, t1);
		},

		p(changed, ctx) {
			if (changed.title) {
				set_data(t1, ctx.title);
			}

			if ((changed.placement || changed.visible) && div3_class_value !== (div3_class_value = classNames('ant-tooltip', `ant-tooltip-placement-${ctx.placement}`, {
    'ant-tooltip-hidden': !ctx.visible,
  }))) {
				attr(div3, "class", div3_class_value);
			}

			if ((changed.style) && div3_style_value !== (div3_style_value = formatStyle(ctx.style))) {
				attr(div3, "style", div3_style_value);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(div3);
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title, placement, visible, style } = $$props;

	$$self.$set = $$props => {
		if ('title' in $$props) $$invalidate('title', title = $$props.title);
		if ('placement' in $$props) $$invalidate('placement', placement = $$props.placement);
		if ('visible' in $$props) $$invalidate('visible', visible = $$props.visible);
		if ('style' in $$props) $$invalidate('style', style = $$props.style);
	};

	return { title, placement, visible, style };
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["title", "placement", "visible", "style"]);
	}
}

export default Component;