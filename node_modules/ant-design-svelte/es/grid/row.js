/* generated by Svelte v3.6.5 */
import {
	SvelteComponent,
	assign,
	children,
	claim_element,
	create_slot,
	detach,
	element,
	get_slot_changes,
	get_slot_context,
	get_spread_update,
	init,
	insert,
	safe_not_equal,
	set_attributes,
	transition_in,
	transition_out
} from "svelte/internal";
import classNames, { formatStyle } from "../_util/classes";
import { key } from "./_part";
import { onMount, setContext } from "svelte";

function create_fragment(ctx) {
	var div, current;

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	var div_levels = [
		ctx.rowProps
	];

	var div_data = {};
	for (var i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");

			if (default_slot) default_slot.c();
			this.h()
		},

		l(nodes) {
			div = claim_element(nodes, "DIV", {}, false);
			var div_nodes = children(div);

			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},

		h() {
			set_attributes(div, div_data);
		},

		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},

		p(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}

			set_attributes(div, get_spread_update(div_levels, [
				(changed.rowProps) && ctx.rowProps
			]));
		},

		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (detaching) {
				detach(div);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	

  let { class: className, prefixCls = "ant-row", gutter = 0, style = {}, type, align, justify } = $$props;

  setContext(key, {
    gutter
  });

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('class' in $$props) $$invalidate('className', className = $$props.class);
		if ('prefixCls' in $$props) $$invalidate('prefixCls', prefixCls = $$props.prefixCls);
		if ('gutter' in $$props) $$invalidate('gutter', gutter = $$props.gutter);
		if ('style' in $$props) $$invalidate('style', style = $$props.style);
		if ('type' in $$props) $$invalidate('type', type = $$props.type);
		if ('align' in $$props) $$invalidate('align', align = $$props.align);
		if ('justify' in $$props) $$invalidate('justify', justify = $$props.justify);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	let rowProps;

	$$self.$$.update = ($$dirty = { style: 1, gutter: 1, className: 1, prefixCls: 1, type: 1, justify: 1, align: 1 }) => {
		if ($$dirty.style || $$dirty.gutter || $$dirty.className || $$dirty.prefixCls || $$dirty.type || $$dirty.justify || $$dirty.align) { $$invalidate('rowProps', rowProps = {
        style: formatStyle({
          ...style,
          marginLeft: gutter > 0 ? `${gutter / -2}px` : undefined,
          marginRight: gutter > 0 ? `${gutter / -2}px` : null
        }),
        class: classNames(className, {
          [prefixCls]: !type,
          [`${prefixCls}-${type}`]: type,
          [`${prefixCls}-${type}-${justify}`]: type && justify,
          [`${prefixCls}-${type}-${align}`]: type && align
        })
      }); }
	};

	return {
		className,
		prefixCls,
		gutter,
		style,
		type,
		align,
		justify,
		rowProps,
		$$slots,
		$$scope
	};
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["class", "prefixCls", "gutter", "style", "type", "align", "justify"]);
	}
}

export default Component;