/* generated by Svelte v3.6.5 */
import {
	SvelteComponent,
	assign,
	children,
	claim_element,
	create_slot,
	detach,
	element,
	get_slot_changes,
	get_slot_context,
	get_spread_update,
	init,
	insert,
	safe_not_equal,
	set_attributes,
	transition_in,
	transition_out
} from "svelte/internal";
import classNames, { formatStyle } from "../_util/classes";
import { key } from "./_part";
import { onMount, getContext } from "svelte";

function create_fragment(ctx) {
	var div, current;

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	var div_levels = [
		ctx.colProps
	];

	var div_data = {};
	for (var i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");

			if (default_slot) default_slot.c();
			this.h()
		},

		l(nodes) {
			div = claim_element(nodes, "DIV", {}, false);
			var div_nodes = children(div);

			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},

		h() {
			set_attributes(div, div_data);
		},

		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},

		p(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}

			set_attributes(div, get_spread_update(div_levels, [
				(changed.colProps) && ctx.colProps
			]));
		},

		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (detaching) {
				detach(div);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	

  const { gutter } = getContext(key);

  let { class: className, prefixCls = "ant-col", style = {}, span, order, offset, push, pull, xs, sm, md, lg, xl, xxl } = $$props;

  function getSizeClassObj() {
    let sizeClassObj = {};
    const props = {
      xs,
      sm,
      md,
      lg,
      xl,
      xxl
    };
    ["xs", "sm", "md", "lg", "xl", "xxl"].forEach(size => {
      let sizeProps = {};
      if (typeof props[size] === "number") {
        sizeProps.span = props[size];
      } else if (typeof props[size] === "object") {
        sizeProps = props[size] || {};
      }
      sizeClassObj = {
        ...sizeClassObj,
        [`${prefixCls}-${size}-${sizeProps.span}`]:
          sizeProps.span !== undefined,
        [`${prefixCls}-${size}-order-${sizeProps.order}`]:
          sizeProps.order || sizeProps.order === 0,
        [`${prefixCls}-${size}-offset-${sizeProps.offset}`]:
          sizeProps.offset || sizeProps.offset === 0,
        [`${prefixCls}-${size}-push-${sizeProps.push}`]:
          sizeProps.push || sizeProps.push === 0,
        [`${prefixCls}-${size}-pull-${sizeProps.pull}`]:
          sizeProps.pull || sizeProps.pull === 0
      };
    });
    return sizeClassObj;
  }

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('class' in $$props) $$invalidate('className', className = $$props.class);
		if ('prefixCls' in $$props) $$invalidate('prefixCls', prefixCls = $$props.prefixCls);
		if ('style' in $$props) $$invalidate('style', style = $$props.style);
		if ('span' in $$props) $$invalidate('span', span = $$props.span);
		if ('order' in $$props) $$invalidate('order', order = $$props.order);
		if ('offset' in $$props) $$invalidate('offset', offset = $$props.offset);
		if ('push' in $$props) $$invalidate('push', push = $$props.push);
		if ('pull' in $$props) $$invalidate('pull', pull = $$props.pull);
		if ('xs' in $$props) $$invalidate('xs', xs = $$props.xs);
		if ('sm' in $$props) $$invalidate('sm', sm = $$props.sm);
		if ('md' in $$props) $$invalidate('md', md = $$props.md);
		if ('lg' in $$props) $$invalidate('lg', lg = $$props.lg);
		if ('xl' in $$props) $$invalidate('xl', xl = $$props.xl);
		if ('xxl' in $$props) $$invalidate('xxl', xxl = $$props.xxl);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	let colProps;

	$$self.$$.update = ($$dirty = { style: 1, prefixCls: 1, className: 1, span: 1, order: 1, offset: 1, push: 1, pull: 1 }) => {
		if ($$dirty.style || $$dirty.prefixCls || $$dirty.className || $$dirty.span || $$dirty.order || $$dirty.offset || $$dirty.push || $$dirty.pull) { $$invalidate('colProps', colProps = {
        style: formatStyle({
          ...style,
          paddingLeft: gutter > 0 ? `${gutter / 2}px` : undefined,
          paddingRight: gutter > 0 ? `${gutter / 2}px` : null
        }),
        class: classNames(prefixCls, className, {
          [`${prefixCls}-${span}`]: span !== undefined,
          [`${prefixCls}-order-${order}`]: order,
          [`${prefixCls}-offset-${offset}`]: offset,
          [`${prefixCls}-push-${push}`]: push,
          [`${prefixCls}-pull-${pull}`]: pull,
          ...getSizeClassObj()
        })
      }); }
	};

	return {
		className,
		prefixCls,
		style,
		span,
		order,
		offset,
		push,
		pull,
		xs,
		sm,
		md,
		lg,
		xl,
		xxl,
		colProps,
		$$slots,
		$$scope
	};
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["class", "prefixCls", "style", "span", "order", "offset", "push", "pull", "xs", "sm", "md", "lg", "xl", "xxl"]);
	}
}

export default Component;