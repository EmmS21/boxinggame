/* generated by Svelte v3.6.5 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_text,
	create_slot,
	detach,
	element,
	get_slot_changes,
	get_slot_context,
	init,
	insert,
	safe_not_equal,
	space,
	subscribe,
	transition_in,
	transition_out
} from "svelte/internal";
import { setContext, getContext } from "svelte";
import classNames, { formatStyle } from "../_util/classes";
import { store } from "./menu-store";
import warning from "../_util/warning";

const get_title_slot_changes = () => ({});
const get_title_slot_context = () => ({});

function create_fragment(ctx) {
	var li, div, t0, i, div_class_value, div_style_value, t1, ul, current;

	const title_slot_1 = ctx.$$slots.title;
	const title_slot = create_slot(title_slot_1, ctx, get_title_slot_context);

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	return {
		c() {
			li = element("li");
			div = element("div");

			if (title_slot) title_slot.c();
			t0 = space();
			i = element("i");
			t1 = space();
			ul = element("ul");

			if (default_slot) default_slot.c();
			this.h()
		},

		l(nodes) {
			li = claim_element(nodes, "LI", { class: true, role: true }, false);
			var li_nodes = children(li);

			div = claim_element(li_nodes, "DIV", { class: true, style: true }, false);
			var div_nodes = children(div);

			if (title_slot) title_slot.l(div_nodes);
			t0 = claim_text(div_nodes, "\n    ");

			i = claim_element(div_nodes, "I", { class: true }, false);
			var i_nodes = children(i);

			i_nodes.forEach(detach);
			div_nodes.forEach(detach);
			t1 = claim_text(li_nodes, "\n  ");

			ul = claim_element(li_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			if (default_slot) default_slot.l(ul_nodes);
			ul_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(i, "class", "ant-menu-submenu-arrow");
			attr(div, "class", div_class_value = `${ctx.prefixCls}-title`);
			attr(div, "style", div_style_value = formatStyle({ paddingLeft: ctx.inlineIndent }));

			attr(ul, "class", "ant-menu ant-menu-sub ant-menu-inline");
			attr(li, "class", ctx.classString);
			attr(li, "role", "menuitem");
		},

		m(target, anchor) {
			insert(target, li, anchor);
			append(li, div);

			if (title_slot) {
				title_slot.m(div, null);
			}

			append(div, t0);
			append(div, i);
			append(li, t1);
			append(li, ul);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},

		p(changed, ctx) {
			if (title_slot && title_slot.p && changed.$$scope) {
				title_slot.p(get_slot_changes(title_slot_1, ctx, changed, get_title_slot_changes), get_slot_context(title_slot_1, ctx, get_title_slot_context));
			}

			if ((!current || changed.prefixCls) && div_class_value !== (div_class_value = `${ctx.prefixCls}-title`)) {
				attr(div, "class", div_class_value);
			}

			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}

			if (!current || changed.classString) {
				attr(li, "class", ctx.classString);
			}
		},

		i(local) {
			if (current) return;
			transition_in(title_slot, local);
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(title_slot, local);
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (detaching) {
				detach(li);
			}

			if (title_slot) title_slot.d(detaching);

			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $store;

	subscribe($$self, store, $$value => { $store = $$value; $$invalidate('$store', $store); });

	

  let { class: className, prefixCls = "ant-menu-submenu", key = "", disabled = false } = $$props;
  //  ant-menu-submenu ant-menu-submenu-inline ant-menu-submenu-open ant-menu-submenu-selected

  let classString;

  const { inlineIndent } = getContext("menu");
  setContext("menu", {
    inlineIndent: inlineIndent * 2
  });

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('class' in $$props) $$invalidate('className', className = $$props.class);
		if ('prefixCls' in $$props) $$invalidate('prefixCls', prefixCls = $$props.prefixCls);
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('disabled' in $$props) $$invalidate('disabled', disabled = $$props.disabled);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	$$self.$$.update = ($$dirty = { prefixCls: 1, $store: 1, className: 1 }) => {
		if ($$dirty.prefixCls || $$dirty.$store || $$dirty.className) { {
        $$invalidate('classString', classString = classNames(
          prefixCls,
          `${prefixCls}-${$store.mode}`,
          {
            [`${prefixCls}-root`]: true
          },
          className
        ));
      } }
	};

	return {
		className,
		prefixCls,
		key,
		disabled,
		classString,
		inlineIndent,
		$$slots,
		$$scope
	};
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["class", "prefixCls", "key", "disabled"]);
	}
}

export default Component;