/* generated by Svelte v3.6.5 */
import {
	SvelteComponent,
	attr,
	children,
	claim_element,
	create_slot,
	detach,
	element,
	get_slot_changes,
	get_slot_context,
	init,
	insert,
	safe_not_equal,
	transition_in,
	transition_out
} from "svelte/internal";
import { setContext, createEventDispatcher } from "svelte";
import classNames, { formatStyle } from "../_util/classes";
import warning from "../_util/warning";
import { store } from "./menu-store";

function create_fragment(ctx) {
	var ul, ul_style_value, current;

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	return {
		c() {
			ul = element("ul");

			if (default_slot) default_slot.c();
			this.h()
		},

		l(nodes) {
			ul = claim_element(nodes, "UL", { class: true, role: true, style: true }, false);
			var ul_nodes = children(ul);

			if (default_slot) default_slot.l(ul_nodes);
			ul_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(ul, "class", ctx.classString);
			attr(ul, "role", "menu");
			attr(ul, "style", ul_style_value = formatStyle(ctx.style));
		},

		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},

		p(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}

			if (!current || changed.classString) {
				attr(ul, "class", ctx.classString);
			}

			if ((!current || changed.style) && ul_style_value !== (ul_style_value = formatStyle(ctx.style))) {
				attr(ul, "style", ul_style_value);
			}
		},

		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (detaching) {
				detach(ul);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	

  let { class: className, prefixCls = "ant-menu", defaultOpenKeys = [], defaultSelectedKeys = [], selectedKeys = [], style = {}, theme = "light", mode = "vertical", inlineIndent = "24" } = $$props;

  setContext("menu", {
    inlineIndent
  });

  let classString;
  let dispatch = createEventDispatcher();
  store.subscribe(value => {
    if (
      value.selectedKeys.filter(key => selectedKeys.indexOf(key) === -1).length
    ) {
      dispatch("select", { selectedKeys: value.selectedKeys });
    }
  });

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('class' in $$props) $$invalidate('className', className = $$props.class);
		if ('prefixCls' in $$props) $$invalidate('prefixCls', prefixCls = $$props.prefixCls);
		if ('defaultOpenKeys' in $$props) $$invalidate('defaultOpenKeys', defaultOpenKeys = $$props.defaultOpenKeys);
		if ('defaultSelectedKeys' in $$props) $$invalidate('defaultSelectedKeys', defaultSelectedKeys = $$props.defaultSelectedKeys);
		if ('selectedKeys' in $$props) $$invalidate('selectedKeys', selectedKeys = $$props.selectedKeys);
		if ('style' in $$props) $$invalidate('style', style = $$props.style);
		if ('theme' in $$props) $$invalidate('theme', theme = $$props.theme);
		if ('mode' in $$props) $$invalidate('mode', mode = $$props.mode);
		if ('inlineIndent' in $$props) $$invalidate('inlineIndent', inlineIndent = $$props.inlineIndent);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	$$self.$$.update = ($$dirty = { prefixCls: 1, mode: 1, theme: 1, className: 1, selectedKeys: 1 }) => {
		if ($$dirty.prefixCls || $$dirty.mode || $$dirty.theme || $$dirty.className || $$dirty.selectedKeys) { {
        $$invalidate('classString', classString = classNames(
          prefixCls,
          `${prefixCls}-${mode}`,
          `${prefixCls}-${theme}`,
          `${prefixCls}-root`,
          className
        ));
        store.set({ selectedKeys, mode });
      } }
	};

	return {
		className,
		prefixCls,
		defaultOpenKeys,
		defaultSelectedKeys,
		selectedKeys,
		style,
		theme,
		mode,
		inlineIndent,
		classString,
		$$slots,
		$$scope
	};
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["class", "prefixCls", "defaultOpenKeys", "defaultSelectedKeys", "selectedKeys", "style", "theme", "mode", "inlineIndent"]);
	}
}

export default Component;