/* generated by Svelte v3.6.5 */
import {
	SvelteComponent,
	attr,
	children,
	claim_element,
	create_slot,
	detach,
	element,
	get_slot_changes,
	get_slot_context,
	init,
	insert,
	listen,
	safe_not_equal,
	subscribe,
	transition_in,
	transition_out
} from "svelte/internal";
import { getContext } from "svelte";
import classNames, { formatStyle } from "../_util/classes";
import warning from "../_util/warning";
import { store } from "./menu-store";

function create_fragment(ctx) {
	var li, li_style_value, current, dispose;

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	return {
		c() {
			li = element("li");

			if (default_slot) default_slot.c();
			this.h()
		},

		l(nodes) {
			li = claim_element(nodes, "LI", { class: true, role: true, style: true }, false);
			var li_nodes = children(li);

			if (default_slot) default_slot.l(li_nodes);
			li_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(li, "class", ctx.classString);
			attr(li, "role", "menuitem");
			attr(li, "style", li_style_value = formatStyle({ paddingLeft: ctx.inlineIndent }));
			dispose = listen(li, "click", ctx.handleClick);
		},

		m(target, anchor) {
			insert(target, li, anchor);

			if (default_slot) {
				default_slot.m(li, null);
			}

			current = true;
		},

		p(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}

			if (!current || changed.classString) {
				attr(li, "class", ctx.classString);
			}
		},

		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (detaching) {
				detach(li);
			}

			if (default_slot) default_slot.d(detaching);
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $store;

	subscribe($$self, store, $$value => { $store = $$value; $$invalidate('$store', $store); });

	

  let { class: className, prefixCls = "ant-menu-item", key = "", disabled = false } = $$props;
  let classString;
  const { inlineIndent } = getContext("menu");
  function handleClick(e) {
    store.update(val => ({ ...val, selectedKeys: [key] }));
  }

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('class' in $$props) $$invalidate('className', className = $$props.class);
		if ('prefixCls' in $$props) $$invalidate('prefixCls', prefixCls = $$props.prefixCls);
		if ('key' in $$props) $$invalidate('key', key = $$props.key);
		if ('disabled' in $$props) $$invalidate('disabled', disabled = $$props.disabled);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	$$self.$$.update = ($$dirty = { prefixCls: 1, className: 1, $store: 1, key: 1 }) => {
		if ($$dirty.prefixCls || $$dirty.className || $$dirty.$store || $$dirty.key) { {
        $$invalidate('classString', classString = classNames(prefixCls, className, {
          "ant-menu-item-selected": $store.selectedKeys.indexOf(key) > -1
        }));
      } }
	};

	return {
		className,
		prefixCls,
		key,
		disabled,
		classString,
		inlineIndent,
		handleClick,
		$$slots,
		$$scope
	};
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["class", "prefixCls", "key", "disabled"]);
	}
}

export default Component;