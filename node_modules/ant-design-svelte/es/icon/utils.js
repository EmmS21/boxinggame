var _a;
import warning from '../_util/warning';
// These props make sure that the SVG behaviours like general text.
// Reference: https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4
export var svgBaseProps = (_a = {
        width: '1em',
        height: '1em',
        fill: 'currentColor'
    },
    _a['aria-hidden'] = true,
    _a.focusable = 'false',
    _a);
var fillTester = /-fill$/;
var outlineTester = /-o$/;
var twoToneTester = /-twotone$/;
export function getThemeFromTypeName(type) {
    var result = null;
    if (fillTester.test(type)) {
        result = 'filled';
    }
    else if (outlineTester.test(type)) {
        result = 'outlined';
    }
    else if (twoToneTester.test(type)) {
        result = 'twoTone';
    }
    return result;
}
export function removeTypeTheme(type) {
    return type
        .replace(fillTester, '')
        .replace(outlineTester, '')
        .replace(twoToneTester, '');
}
export function withThemeSuffix(type, theme) {
    var result = type
        .replace(/^\w/, function (a) { return a.toUpperCase(); })
        .replace(/-(\w)/, function (w, a) { return a.toUpperCase(); });
    if (theme === 'filled') {
        result += 'Fill';
    }
    else if (theme === 'outlined') {
        result += 'Outline';
    }
    else if (theme === 'twoTone') {
        result += 'TwoTone';
    }
    else {
        warning(false, 'Icon', "This icon '" + type + "' has unknown theme '" + theme + "'");
    }
    return result;
}
// For alias or compatibility
export function alias(type) {
    var newType = type;
    switch (type) {
        case 'cross':
            newType = 'close';
            break;
        // https://github.com/ant-design/ant-design/issues/13007
        case 'interation':
            newType = 'interaction';
            break;
        // https://github.com/ant-design/ant-design/issues/16810
        case 'canlendar':
            newType = 'calendar';
            break;
        // https://github.com/ant-design/ant-design/issues/17448
        case 'colum-height':
            newType = 'column-height';
            break;
        default:
    }
    warning(newType === type, 'Icon', "Icon '" + type + "' is typo and depracated, please use '" + newType + "' instead.");
    return newType;
}
