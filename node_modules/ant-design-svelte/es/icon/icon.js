/* generated by Svelte v3.6.5 */
import {
	SvelteComponent,
	assign,
	attr,
	bubble,
	check_outros,
	children,
	claim_element,
	create_slot,
	detach,
	detach_between,
	element,
	exclude_internal_props,
	get_slot_changes,
	get_slot_context,
	group_outros,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	svg_element,
	transition_in,
	transition_out
} from "svelte/internal";
import IconFont, { createFromIconfontScriptCN } from "./iconFont";
import { AccountBookFill } from "@ant-design/icons";
import { generate as generateColor } from "@ant-design/colors";
import { renderIconDefinitionToSVGElement } from "@ant-design/icons/lib/helpers";
import * as allIcons from "@ant-design/icons/lib/dist";
import tooltip from "../tooltip";
import {
    svgBaseProps,
    withThemeSuffix,
    removeTypeTheme,
    getThemeFromTypeName,
    alias
  } from "./utils";
import classNames, { formatStyle } from "../_util/classes";
import warning from "../_util/warning";

const get_only_path_slot_changes = () => ({});
const get_only_path_slot_context = () => ({});

// (110:22) 
function create_if_block_2(ctx) {
	var current;

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},

		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},

		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},

		p(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}
		},

		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},

		o(local) {
			transition_out(default_slot, local);
			current = false;
		},

		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (106:23) 
function create_if_block_1(ctx) {
	var svg, current;

	const only_path_slot_1 = ctx.$$slots["only-path"];
	const only_path_slot = create_slot(only_path_slot_1, ctx, get_only_path_slot_context);

	return {
		c() {
			svg = svg_element("svg");

			if (only_path_slot) only_path_slot.c();
			this.h()
		},

		l(nodes) {
			svg = claim_element(nodes, "svg", { viewBox: true, width: true, height: true, fill: true }, true);
			var svg_nodes = children(svg);

			if (only_path_slot) only_path_slot.l(svg_nodes);
			svg_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(svg, "viewBox", "0 0 1024 1024");
			attr(svg, "width", "1em");
			attr(svg, "height", "1em");
			attr(svg, "fill", "currentColor");
		},

		m(target, anchor) {
			insert(target, svg, anchor);

			if (only_path_slot) {
				only_path_slot.m(svg, null);
			}

			current = true;
		},

		p(changed, ctx) {
			if (only_path_slot && only_path_slot.p && changed.$$scope) {
				only_path_slot.p(get_slot_changes(only_path_slot_1, ctx, changed, get_only_path_slot_changes), get_slot_context(only_path_slot_1, ctx, get_only_path_slot_context));
			}
		},

		i(local) {
			if (current) return;
			transition_in(only_path_slot, local);
			current = true;
		},

		o(local) {
			transition_out(only_path_slot, local);
			current = false;
		},

		d(detaching) {
			if (detaching) {
				detach(svg);
			}

			if (only_path_slot) only_path_slot.d(detaching);
		}
	};
}

// (104:2) {#if iconSvg}
function create_if_block(ctx) {
	var raw_before, raw_after;

	return {
		c() {
			raw_before = element('noscript');
			raw_after = element('noscript');
		},

		l(nodes) {
			raw_before = element('noscript');
			raw_after = element('noscript');
		},

		m(target, anchor) {
			insert(target, raw_before, anchor);
			raw_before.insertAdjacentHTML("afterend", ctx.iconSvg);
			insert(target, raw_after, anchor);
		},

		p(changed, ctx) {
			if (changed.iconSvg) {
				detach_between(raw_before, raw_after);
				raw_before.insertAdjacentHTML("afterend", ctx.iconSvg);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach_between(raw_before, raw_after);
				detach(raw_before);
				detach(raw_after);
			}
		}
	};
}

function create_fragment(ctx) {
	var i, current_block_type_index, if_block, i_style_value, tooltip_action, current, dispose;

	var if_block_creators = [
		create_if_block,
		create_if_block_1,
		create_if_block_2
	];

	var if_blocks = [];

	function select_block_type(ctx) {
		if (ctx.iconSvg) return 0;
		if (ctx.isOnlyPath) return 1;
		if (ctx.isDefault) return 2;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			i = element("i");
			if (if_block) if_block.c();
			this.h()
		},

		l(nodes) {
			i = claim_element(nodes, "I", { class: true, "aria-label": true, style: true }, false);
			var i_nodes = children(i);

			if (if_block) if_block.l(i_nodes);
			i_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(i, "class", ctx.classString);
			attr(i, "aria-label", ctx.type);
			attr(i, "style", i_style_value = formatStyle(ctx.style));

			dispose = [
				listen(i, "click", ctx.click_handler),
				listen(i, "mouseout", ctx.mouseout_handler)
			];
		},

		m(target, anchor) {
			insert(target, i, anchor);
			if (~current_block_type_index) if_blocks[current_block_type_index].m(i, null);
			tooltip_action = tooltip.call(null, i, ctx.tooltipConfig) || {};
			current = true;
		},

		p(changed, ctx) {
			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);
			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				if (if_block) {
					group_outros();
					transition_out(if_blocks[previous_block_index], 1, () => {
						if_blocks[previous_block_index] = null;
					});
					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];
					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					}
					transition_in(if_block, 1);
					if_block.m(i, null);
				} else {
					if_block = null;
				}
			}

			if (!current || changed.classString) {
				attr(i, "class", ctx.classString);
			}

			if (!current || changed.type) {
				attr(i, "aria-label", ctx.type);
			}

			if ((!current || changed.style) && i_style_value !== (i_style_value = formatStyle(ctx.style))) {
				attr(i, "style", i_style_value);
			}

			if (typeof tooltip_action.update === 'function' && changed.tooltipConfig) {
				tooltip_action.update.call(null, ctx.tooltipConfig);
			}
		},

		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o(local) {
			transition_out(if_block);
			current = false;
		},

		d(detaching) {
			if (detaching) {
				detach(i);
			}

			if (~current_block_type_index) if_blocks[current_block_type_index].d();
			if (tooltip_action && typeof tooltip_action.destroy === 'function') tooltip_action.destroy();
			run_all(dispose);
		}
	};
}

const _primaryColor = "#1890ff";
function setTwoToneColor(primaryColor) {
  _primaryColor = primaryColor;
}

function getTwoToneColor() {
  return _primaryColor;
}
function createFromIconfontCN(options) {
  createFromIconfontScriptCN(options);
  return IconFont;
}

let defaultTheme = "outlined";

function instance($$self, $$props, $$invalidate) {
	

  let { tooltip: tooltipConfig } = $$props;

  let { class: className, type, spin, theme, rotate, twoToneColor, style = {} } = $$props;
  let iconSvg;
  let classString;
  let extraSVGAttrs;
  let havSlot = !!$$props.$$slots;
  let isDefault = havSlot && $$props.$$slots.default;
  let isOnlyPath = havSlot && $$props.$$slots["only-path"];

	let { $$slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseout_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$new_props => {
		$$invalidate('$$props', $$props = assign(assign({}, $$props), $$new_props))
		if ('tooltip' in $$new_props) $$invalidate('tooltipConfig', tooltipConfig = $$new_props.tooltip);
		if ('class' in $$new_props) $$invalidate('className', className = $$new_props.class);
		if ('type' in $$new_props) $$invalidate('type', type = $$new_props.type);
		if ('spin' in $$new_props) $$invalidate('spin', spin = $$new_props.spin);
		if ('theme' in $$new_props) $$invalidate('theme', theme = $$new_props.theme);
		if ('rotate' in $$new_props) $$invalidate('rotate', rotate = $$new_props.rotate);
		if ('twoToneColor' in $$new_props) $$invalidate('twoToneColor', twoToneColor = $$new_props.twoToneColor);
		if ('style' in $$new_props) $$invalidate('style', style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate('$$scope', $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = ($$dirty = { type: 1, className: 1, spin: 1, rotate: 1, theme: 1, defaultTheme: 1, twoToneColor: 1, extraSVGAttrs: 1 }) => {
		if ($$dirty.type || $$dirty.className || $$dirty.spin || $$dirty.rotate || $$dirty.theme || $$dirty.defaultTheme || $$dirty.twoToneColor || $$dirty.extraSVGAttrs) { {
        $$invalidate('classString', classString = classNames(
          {
            [`anticon`]: true,
            [`anticon-${type}`]: Boolean(type)
          },
          className
        ));
        $$invalidate('extraSVGAttrs', extraSVGAttrs = {
          ...svgBaseProps,
          class: classNames({
            [`anticon-spin`]: !!spin || type === "loading"
          }),
          style: formatStyle({
            transform: rotate ? `rotate(${rotate}deg)` : null
          })
        });
        if (typeof type === "string") {
          let computedType = type;
          if (theme) {
            const themeInName = getThemeFromTypeName(type);
            warning(
              !themeInName || theme === themeInName,
              "Icon",
              `The icon name '${type}' already specify a theme '${themeInName}',` +
                ` the 'theme' prop '${theme}' will be ignored.`
            );
          }
          computedType = withThemeSuffix(
            removeTypeTheme(alias(computedType)),
            theme || defaultTheme
          );
          const primaryColor = twoToneColor || getTwoToneColor();
          $$invalidate('iconSvg', iconSvg = renderIconDefinitionToSVGElement(allIcons[computedType], {
            extraSVGAttrs,
            placeholders: {
              primaryColor,
              secondaryColor: generateColor(primaryColor)[0]
            }
          }));
        }
      } }
	};

	return {
		tooltipConfig,
		className,
		type,
		spin,
		theme,
		rotate,
		twoToneColor,
		style,
		iconSvg,
		classString,
		isDefault,
		isOnlyPath,
		click_handler,
		mouseout_handler,
		$$props: $$props = exclude_internal_props($$props),
		$$slots,
		$$scope
	};
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["tooltip", "class", "type", "spin", "theme", "rotate", "twoToneColor", "style"]);
	}
}

export default Component;
export { setTwoToneColor, getTwoToneColor, createFromIconfontCN };