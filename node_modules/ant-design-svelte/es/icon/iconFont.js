/* generated by Svelte v3.6.5 */
import {
	SvelteComponent,
	attr,
	children,
	claim_element,
	destroy_component,
	detach,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	svg_element,
	transition_in,
	transition_out,
	xlink_attr
} from "svelte/internal";
import Icon from "./icon";

// (28:2) 
function create_only_path_slot(ctx) {
	var use, use_xlink_href_value;

	return {
		c() {
			use = svg_element("use");
			this.h()
		},

		l(nodes) {
			use = claim_element(nodes, "use", { slot: true, "xlink:href": true }, true);
			var use_nodes = children(use);

			use_nodes.forEach(detach);
			this.h();
		},

		h() {
			attr(use, "slot", "only-path");
			xlink_attr(use, "xlink:href", use_xlink_href_value = `#${ctx.type}`);
		},

		m(target, anchor) {
			insert(target, use, anchor);
		},

		p(changed, ctx) {
			if ((changed.type) && use_xlink_href_value !== (use_xlink_href_value = `#${ctx.type}`)) {
				xlink_attr(use, "xlink:href", use_xlink_href_value);
			}
		},

		d(detaching) {
			if (detaching) {
				detach(use);
			}
		}
	};
}

// (27:0) <Icon>
function create_default_slot(ctx) {
	return {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		d: noop
	};
}

function create_fragment(ctx) {
	var current;

	var icon = new Icon({
		props: {
		$$slots: {
		default: [create_default_slot],
		"only-path": [create_only_path_slot]
	},
		$$scope: { ctx }
	}
	});

	return {
		c() {
			icon.$$.fragment.c();
		},

		l(nodes) {
			icon.$$.fragment.l(nodes);
		},

		m(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},

		p(changed, ctx) {
			var icon_changes = {};
			if (changed.$$scope || changed.type) icon_changes.$$scope = { changed, ctx };
			icon.$set(icon_changes);
		},

		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);

			current = true;
		},

		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},

		d(detaching) {
			destroy_component(icon, detaching);
		}
	};
}

const customCache = new Set();
function createFromIconfontScriptCN(options = {}) {
  const { scriptUrl, extraCommonProps = {} } = options;
  if (
    typeof document !== "undefined" &&
    typeof window !== "undefined" &&
    typeof document.createElement === "function" &&
    typeof scriptUrl === "string" &&
    scriptUrl.length &&
    !customCache.has(scriptUrl)
  ) {
    const script = document.createElement("script");
    script.setAttribute("src", scriptUrl);
    script.setAttribute("data-namespace", scriptUrl);
    customCache.add(scriptUrl);
    document.body.appendChild(script);
  }
}

function instance($$self, $$props, $$invalidate) {
	let { type } = $$props;

	$$self.$set = $$props => {
		if ('type' in $$props) $$invalidate('type', type = $$props.type);
	};

	return { type };
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["type"]);
	}
}

export default Component;
export { createFromIconfontScriptCN };